{% open_file('protected/models/'.nice_path($model, 'php')) %}<?php
class {%= $model->getName() %} {%= superclass($model) %} {%= interfaces($model) %} {

    {% foreach(local_attributes($model) as $attr): %}
    {%= $attr %}
    {% endforeach %}

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}
	
	public function tableName() {
		return '{%= table_name($model) %}';
	}
	
	public function attributeLabels() {
		return array(
{% start_attr_list %}
{% if (attribute_id($attribute) != $attribute->getName()): %}
			'{%= attribute_id($attribute) %}' => {%= escape_value(attribute_label($attribute)) %},
			'{%= $attribute->getName() %}' => {%= escape_value(attribute_label($attribute)) %},
{% else: %}
			'{%= attribute_id($attribute) %}' => {%= escape_value(attribute_label($attribute)) %},
{% endif %}
{% end_attr_list %}
		);
	}
	
	public function rules() {
		return array(
{% foreach(validation_rules($model) as $rule => $attribs): %}
			array('	{%= implode(",\n\t\t\t\t\t", $attribs) %}', 
					{%= $rule %}),
{% endforeach %}
{% if(count($searchable = searchable_attributes($model))): %}
			array('	{%= implode(",\n\t\t\t\t\t", array_map('attribute_id', $searchable)) %}', 
					'safe', 'on' => 'search'),
{% endif %}
		);
	}
	
	public function relations() {
		return array(
{% start_attr_list %}
{% foreach (relations($attribute, $model) as $relation): %}
			'{%= $attribute->getName() %}' => {%= $relation %},
{% endforeach %}
{% end_attr_list %}
		);
	}
	
	public function behaviors() {
		return array(
{% foreach(behaviors($model) as $behavior): %}
			{%= escape_value($behavior, 3) %},
{% endforeach %}
		);
	}
	
	public function search($params=array()) {
		$criteria = new CDbCriteria($params);
{% foreach(searchable_attributes($model) as $attribute): %}
{% if ($attribute->getType() == Attribute::TYPE_CHAR || $attribute->getType() == Attribute::TYPE_TEXT): %}
		$criteria->compare('t.{%= attribute_id($attribute) %}', $this->{%= attribute_id($attribute) %}, true);
{% else: %}
		$criteria->compare('t.{%= attribute_id($attribute) %}', $this->{%= attribute_id($attribute) %});
{% endif %}
{% endforeach %}
		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	
	public function __toString() {
		return (string) $this->primaryKey;
	}
	
	public static function getList() {
		$criteria = new CDbCriteria();
		return CHtml::listData(self::model()->findAll($criteria), 'id', 'id');
	}

}
{% close_file() %}
